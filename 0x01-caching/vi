#!/usr/bin/env python3
""" LFUCache module
"""

from base_caching import BaseCaching


class LFUCache(BaseCaching):
    """ LFUCache class
    """

    def __init__(self):
        """ Initialize the cache
        """
        super().__init__()
        self.frequency = {}
        self.min_frequency = 0

    def put(self, key, item):
        """ Add an item in the cache
        """
        if key is None or item is None:
            return

        if key in self.cache_data:
            self.cache_data[key] = item
            self.frequency[key] += 1
        else:
            if len(self.cache_data) >= BaseCaching.MAX_ITEMS:
                # Find least frequently used items
                least_frequent_items = [k for k, v in self.frequency.items() if v == self.min_frequency]
                if least_frequent_items:
                    # Choose the least recently used item among least frequently used items
                    discard_key = min(least_frequent_items, key=lambda x: self.order.index(x))
                    del self.cache_data[discard_key]
                    del self.frequency[discard_key]
                    print(f"DISCARD: {discard_key}")

            self.cache_data[key] = item
            self.frequency[key] = 1
            self.min_frequency = 1

    def get(self, key):
        """ Get an item by key
        """
        if key is None or key not in self.cache_data:
            return None

        # Update frequency
        self.frequency[key] += 1

        # Update min_frequency
        self.min_frequency = min(self.frequency.values())

        return self.cache_data[key]

